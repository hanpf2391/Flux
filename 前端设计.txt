
4. 需求 FR-3: 增加系统状态统计显示 (V3 - 最终版)
FR-3.1 (目标):
在主视图界面左上角，实时显示“在线用户数”、“信息总数”和“当前视区内节点数”。

FR-3.2 (后端支持):
后端通过单一的WebSocket消息，高效推送所有全局统计数据。
修改 `FluxWebSocketHandler`: 在有新用户连接、用户断开连接或新消息被创建时，触发一次统计更新。该更新包含最新的在线人数和数据库中的信息总数。
广播消息类型: `SYSTEM_STATS_UPDATED`
消息体格式: `{ "onlineCount": number, "totalMessages": number }`。

FR-3.3 (前端实现):
a. 状态管理层 (`src/store/fluxStore.ts`):
- 在 `useFluxStore` 的 state 中增加状态：`onlineCount: number` (初始值为0) 和 `totalMessages: number` (初始值为0)。
- 增加一个名为 `updateSystemStats` 的 action，它接收一个包含 `onlineCount` 和 `totalMessages` 的对象，并更新上述 state。
- 在 `getters` 中维持 `visibleNodesCount` 计算属性，其值依然是 `return state.nodes.length;`。

b. WebSocket集成层 (`src/composables/useWebSocket.ts`):
- 修改WebSocket消息监听逻辑，以处理 `SYSTEM_STATS_UPDATED` 消息。
- 当收到此类型消息时，调用 `fluxStore.updateSystemStats(data)`。

c. UI展现层 (`src/views/FluxView.vue`):
- 在视图的左上角，新增一个固定的UI区域用于显示所有统计信息。
- 从 `fluxStore` 中获取 `onlineCount` 和 `totalMessages` 状态，以及 `visibleNodesCount` getter。
- 显示格式为: "在线: [onlineCount] | 总数: [totalMessages] | 视区: [visibleNodesCount]"。
- 例如: "在线: 25 | 总数: 15000 | 视区: 87"。
- 此UI区域应有半透明背景，以确保在各种画布背景下都清晰可见。
信息总数统计逻辑：前端调用接口去数据库里查信息表中全部数据中，坐标不同的数据，
还有就是，视区信息数，不是前端就算当前页面网格中有多少格子，而是要就算在页面的坐标范围内，去数据库里查，有多少坐标不同的信息数，比如前端通过接口传递右       │
│   下角，左上角的坐标，就可以在数据库中根据这两个坐标来就算这个范围内，有多少条坐标不同的数据，然后返回给前端进行显示出来就行了，偶记得，当用户放大缩小，       │
│   移动网格的时候不要立即发送请求，而是等用户停下来的时候才发送请求就算视区内有多少条信息