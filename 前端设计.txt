“熵流 (Flux)” 绘画工具链终极优化规格书 V4.1
1. 核心设计原则
即时响应 (Instant Response): 用户的任何意图（如“我想选颜色”）都应得到即时的、一步到位的响应。严禁任何不必要中间步骤。
状态持久 (Persistent State): 当用户进入一个创作“模式”（如绘画），该模式下的核心工具（如调色盘）应保持可见和可用，直到用户明确退出该模式。
快捷高效 (Efficient & Ergonomic): 必须为高频操作提供快捷键（如ESC），最大化地减少鼠标的无效移动。
2. 需求 FR-1: 优化调色盘交互流程
FR-1.1 (移除中间步骤):
必须彻底移除当前点击调色盘图标后出现的、带有“预览”性质的中间状态（截图中的红框部分）。
新的流程: 当用户单击右上角的“调色盘”图标时，必须立即以浮动面板的形式，直接展开功能完善的“颜色选择器”。
FR-1.2 (持久化调色盘):
当“颜色选择器”面板展开后，它绝不能在用户选择了一个颜色后自动消失。
它必须保持可见，直到用户通过明确的操作（见FR-1.4）将其关闭。
价值: 这允许用户在绘画过程中，无需重复点击主图标，就能在调色盘上连续、快速地切换不同的颜色，极大地提升了创作效率。
FR-1.3 (光标样式修正):
当用户在颜色选择器中选择了一个有效的颜色（任何非“清除”的颜色）后，鼠标光标必须从默认指针变为**“小手”图标 (pointer cursor style)**，而不是加号。
FR-1.4 (统一的退出机制):
用户通过以下任一方式来关闭颜色选择器面板，并同时退出绘画模式：
按下 ESC 键 (新增快捷方式)。
再次单击右上角的“调色盘”图标 (作为开关)。
点击颜色选择器面板内部的“关闭 (X)”按钮（如果面板有的话）。
退出后的状态恢复: 无论通过何种方式退出，必须确保以下状态全部被重置：
“颜色选择器”面板消失。
currentTool 状态切换回 'text'。
鼠标光标恢复为默认指针。
右上角的调色盘图标背景恢复为默认的粉色。
3. 需求 FR-2: 优化橡皮擦交互流程
FR-2.1 (增加 ESC 快捷键):
必须为“橡皮擦”工具增加一个统一的退出快捷方式。
新的流程:
用户单击“橡皮擦”图标，进入擦除模式。
用户在画布上进行擦除操作。
用户按下 ESC 键。
必须立即退出擦除模式，currentTool 状态切换回 'text'，鼠标光标恢复为默认指针。

4. 需求 FR-3: 增加系统状态统计显示 (V2 - 修订版)
FR-3.1 (目标):
在主视图界面左上角，实时显示“在线用户数”和“当前视区内显示的信息数”。

FR-3.2 (后端支持):
后端仅需通过WebSocket提供在线人数。
修改 `FluxWebSocketHandler`: 在有新用户连接或现有用户断开连接时，计算当前总连接数，并向所有客户端广播一条 `ONLINE_COUNT_UPDATED` 类型的消息。
消息体格式: `{ "onlineCount": number }`。

FR-3.3 (前端实现):
a. 状态管理层 (`src/store/fluxStore.ts`):
- 在 `useFluxStore` 的 state 中增加状态：`onlineCount: number` (初始值为0)。
- 增加一个名为 `updateOnlineCount` 的 action，接收 `onlineCount` 参数并更新 state。
- 在 `getters` 中新增一个计算属性 `visibleNodesCount`，其值为 `return state.nodes.length;`。这确保了节点计数总是与视图同步，且无需额外维护状态。

b. WebSocket集成层 (`src/composables/useWebSocket.ts`):
- 修改WebSocket消息监听逻辑，增加对 `ONLINE_COUNT_UPDATED` 消息的处理。
- 当收到此类型消息时，调用 `fluxStore.updateOnlineCount(data.onlineCount)`。

c. UI展现层 (`src/views/FluxView.vue`):
- 在视图的左上角，新增一个固定的UI区域用于显示统计信息。
- 从 `fluxStore` 中获取 `onlineCount` 状态和 `visibleNodesCount` getter。
- 显示格式为: "在线: [onlineCount] | 视区节点: [visibleNodesCount]"。例如: "在线: 25 | 视区节点: 87"。
- 此UI区域应有半透明背景，以确保在各种画布背景下都清晰可见。